diff --unified --recursive '--exclude=.pylint-disable.patch' original/ami/tests/test_facade.py patched/ami/tests/test_facade.py
--- original/ami/tests/test_facade.py
+++ patched/ami/tests/test_facade.py
@@ -27,7 +27,7 @@
         facade = FacadeAMIClient('example.org', '1', '2')
         facade._ami_client = Mock()
 
-        facade.db_del('foo', 'bar')
+        facade.db_del('foo', 'bar') # pylint: disable=no-member
 
         ReconnectingAMIClient.assert_called_once_with('example.org', 5038, facade._login)
         self.assertTrue(facade._ami_client.execute.called)
diff --unified --recursive '--exclude=.pylint-disable.patch' original/amqp.py patched/amqp.py
--- original/amqp.py
+++ patched/amqp.py
@@ -19,7 +19,7 @@
 import logging
 import threading
 
-from kombu import Queue
+from kombu import Queue # pylint: disable=no-name-in-module
 from kombu.mixins import ConsumerMixin
 from xivo_bus.resources.agent.event import EditAgentEvent, DeleteAgentEvent
 from xivo_bus.resources.queue.event import CreateQueueEvent, EditQueueEvent, DeleteQueueEvent
@@ -75,7 +75,7 @@
         message.ack()
         try:
             self._msg_handler.handle_msg(body)
-        except Exception:
+        except Exception: # pylint: disable=broad-except
             logger.warning('Unexpected error while handling AMQP message', exc_info=True)
 
 
diff --unified --recursive '--exclude=.pylint-disable.patch' original/bin/agentd.py patched/bin/agentd.py
--- original/bin/agentd.py
+++ patched/bin/agentd.py
@@ -20,7 +20,7 @@
 import signal
 import xivo_dao
 
-from kombu import Connection, Producer, Exchange
+from kombu import Connection, Producer, Exchange # pylint: disable=no-name-in-module,no-name-in-module,no-name-in-module
 from contextlib import contextmanager
 
 from xivo.chain_map import ChainMap
@@ -96,7 +96,7 @@
         logger.info('Starting xivo-agentd')
         try:
             _run(config)
-        except Exception:
+        except Exception: # pylint: disable=broad-except
             logger.exception('Unexpected error:')
         finally:
             logger.info('Stopping xivo-agentd')
@@ -177,7 +177,7 @@
     signal.signal(signal.SIGTERM, _handle_sigterm)
 
 
-def _handle_sigterm(signum, frame):
+def _handle_sigterm(signum, frame): # pylint: disable=unused-argument,unused-argument
     raise SystemExit()
 
 
diff --unified --recursive '--exclude=.pylint-disable.patch' original/http.py patched/http.py
--- original/http.py
+++ patched/http.py
@@ -20,7 +20,7 @@
 from cherrypy import wsgiserver
 from flask import Flask
 from flask import request
-from flask.ext import restful
+from flask.ext import restful # pylint: disable=no-name-in-module
 from werkzeug.contrib.fixers import ProxyFix
 from werkzeug.exceptions import BadRequest
 from xivo_agent.exception import AgentServerError, NoSuchAgentError, NoSuchExtensionError, \
@@ -80,30 +80,30 @@
     return queue_id
 
 
-class _BaseResource(restful.Resource):
+class _BaseResource(restful.Resource): # pylint: disable=no-init
 
     method_decorators = [_common_error_handler]
 
 
-class _Agents(_BaseResource):
+class _Agents(_BaseResource): # pylint: disable=no-init
 
     def get(self):
         return self.service_proxy.get_agent_statuses()
 
 
-class _AgentById(_BaseResource):
+class _AgentById(_BaseResource): # pylint: disable=no-init
 
     def get(self, agent_id):
         return self.service_proxy.get_agent_status_by_id(agent_id)
 
 
-class _AgentByNumber(_BaseResource):
+class _AgentByNumber(_BaseResource): # pylint: disable=no-init
 
     def get(self, agent_number):
         return self.service_proxy.get_agent_status_by_number(agent_number)
 
 
-class _LoginAgentById(_BaseResource):
+class _LoginAgentById(_BaseResource): # pylint: disable=no-init
 
     def post(self, agent_id):
         extension, context = _extract_extension_and_context()
@@ -111,7 +111,7 @@
         return '', 204
 
 
-class _LoginAgentByNumber(_BaseResource):
+class _LoginAgentByNumber(_BaseResource): # pylint: disable=no-init
 
     def post(self, agent_number):
         extension, context = _extract_extension_and_context()
@@ -119,7 +119,7 @@
         return '', 204
 
 
-class _LogoffAgentById(_BaseResource):
+class _LogoffAgentById(_BaseResource): # pylint: disable=no-init
 
     def post(self, agent_id):
         # XXX logoff_agent_by_id raise a AgentNotLoggedError even if the agent doesn't exist;
@@ -128,21 +128,21 @@
         return '', 204
 
 
-class _LogoffAgentByNumber(_BaseResource):
+class _LogoffAgentByNumber(_BaseResource): # pylint: disable=no-init
 
     def post(self, agent_number):
         self.service_proxy.logoff_agent_by_number(agent_number)
         return '', 204
 
 
-class _LogoffAgents(_BaseResource):
+class _LogoffAgents(_BaseResource): # pylint: disable=no-init
 
     def post(self):
         self.service_proxy.logoff_all()
         return '', 204
 
 
-class _AddAgentToQueue(_BaseResource):
+class _AddAgentToQueue(_BaseResource): # pylint: disable=no-init
 
     def post(self, agent_id):
         queue_id = _extract_queue_id()
@@ -150,7 +150,7 @@
         return '', 204
 
 
-class _RemoveAgentFromQueue(_BaseResource):
+class _RemoveAgentFromQueue(_BaseResource): # pylint: disable=no-init
 
     def post(self, agent_id):
         queue_id = _extract_queue_id()
@@ -158,21 +158,21 @@
         return '', 204
 
 
-class _RelogAgents(_BaseResource):
+class _RelogAgents(_BaseResource): # pylint: disable=no-init
 
     def post(self):
         self.service_proxy.relog_all()
         return '', 204
 
 
-class _PauseAgentByNumber(_BaseResource):
+class _PauseAgentByNumber(_BaseResource): # pylint: disable=no-init
 
     def post(self, agent_number):
         self.service_proxy.pause_agent_by_number(agent_number)
         return '', 204
 
 
-class _UnpauseAgentByNumber(_BaseResource):
+class _UnpauseAgentByNumber(_BaseResource): # pylint: disable=no-init
 
     def post(self, agent_number):
         self.service_proxy.unpause_agent_by_number(agent_number)
diff --unified --recursive '--exclude=.pylint-disable.patch' original/service/manager/relog.py patched/service/manager/relog.py
--- original/service/manager/relog.py
+++ patched/service/manager/relog.py
@@ -33,7 +33,7 @@
         for agent_status in agent_statuses:
             try:
                 self._relog_agent(agent_status)
-            except Exception:
+            except Exception: # pylint: disable=broad-except
                 logger.warning('Could not relog agent %s', agent_status.agent_id, exc_info=True)
 
     def _get_agent_statuses(self):
